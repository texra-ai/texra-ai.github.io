import{_ as l,c as r,o as p,a2 as a,j as i,a as e,t}from"./chunks/framework.D30IVGRC.js";const f=JSON.parse('{"title":"Custom Agents","description":"","frontmatter":{},"headers":[],"relativePath":"guide/custom-agents.md","filePath":"guide/custom-agents.md"}'),o={name:"guide/custom-agents.md"};function h(n,s,d,u,g,k){return p(),r("div",null,[s[38]||(s[38]=a(`<h1 id="custom-agents" tabindex="-1">Custom Agents <a class="header-anchor" href="#custom-agents" aria-label="Permalink to &quot;Custom Agents&quot;">​</a></h1><p>TeXRA allows you to create custom agents tailored to your specific academic research needs. This is where you can truly unleash the power of AI for your unique workflows (or just make an agent that writes everything in pirate speak, we won&#39;t judge). This guide focuses on the practical steps of creating the agent definition (<code>.yaml</code>) file.</p><div class="info custom-block"><p class="custom-block-title">Agent Fundamentals</p><p>Before creating a custom agent, it&#39;s highly recommended to understand the underlying concepts:</p><ul><li><strong>Agent Architecture &amp; Execution Flow</strong>: Learn about the <code>.yaml</code> structure, settings, prompts, and how agents run. See the <a href="./agent-architecture.html">Agent Architecture &amp; Execution Flow</a> guide.</li><li><strong>Built-in Agents</strong>: Review the standard agents provided by TeXRA for examples and potential inheritance parents. See the <a href="./built-in-agents.html">Built-in Agent Reference</a>.</li><li><strong>Agent Explorer</strong>: Learn how to browse and manage agent files using the <a href="./agent-explorer.html">Agent Explorer</a> view in the TeXRA sidebar.</li></ul></div><h2 id="creating-a-custom-agent-file" tabindex="-1">Creating a Custom Agent File <a class="header-anchor" href="#creating-a-custom-agent-file" aria-label="Permalink to &quot;Creating a Custom Agent File&quot;">​</a></h2><p>Follow these steps to create a new custom agent:</p><h3 id="step-1-locate-or-configure-the-custom-agents-directory" tabindex="-1">Step 1: Locate or Configure the Custom Agents Directory <a class="header-anchor" href="#step-1-locate-or-configure-the-custom-agents-directory" aria-label="Permalink to &quot;Step 1: Locate or Configure the Custom Agents Directory&quot;">​</a></h3><p>Custom agents reside in a specific directory.</p><ol><li><strong>Find Existing</strong>: Look for the &quot;Custom Agents&quot; folder within the <a href="./agent-explorer.html">Agent Explorer</a>.</li><li><strong>Configure (Optional)</strong>: If the folder doesn&#39;t exist or you want to use a different location, set the path in VS Code Settings (<code>Ctrl+,</code>) under <code>texra.explorer.agentsDirectory</code>.</li></ol><h3 id="step-2-create-a-new-yaml-file" tabindex="-1">Step 2: Create a New YAML File <a class="header-anchor" href="#step-2-create-a-new-yaml-file" aria-label="Permalink to &quot;Step 2: Create a New YAML File&quot;">​</a></h3><ol><li>Using the <a href="./agent-explorer.html">Agent Explorer</a>, right-click within your &quot;Custom Agents&quot; directory (or a subfolder).</li><li>Select &quot;New File&quot;.</li><li>You&#39;ll be prompted for a name. Choose a descriptive name using underscores and ending with <code>.yaml</code> (e.g., <code>literature_review_generator.yaml</code>).</li></ol><h3 id="step-3-define-the-agent" tabindex="-1">Step 3: Define the Agent <a class="header-anchor" href="#step-3-define-the-agent" aria-label="Permalink to &quot;Step 3: Define the Agent&quot;">​</a></h3><p>Open the newly created <code>.yaml</code> file and define your agent&#39;s structure. Start with a basic template and customize it. Here are the key fields:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --- Agent Inheritance (Optional) ---</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specify a built-in or other custom agent to inherit settings and prompts from.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># See guide/built-in-agents.md for potential parents.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">inherits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">base</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Or polish, correct, etc.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --- Agent Settings ---</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define the agent&#39;s core behavior and operational parameters.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Override parent settings here if inheriting.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Core Behavior</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  agentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CoT</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Type: &#39;CoT&#39; (Chain of Thought) for complex reasoning with scratchpads, or &#39;direct&#39; for simpler, direct output.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  temperature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # LLM creativity (0.0 = deterministic, &gt;0 = more random). Can be overridden by user settings.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  isRewrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Boolean: Does the agent primarily rewrite existing content (true) or generate new content (false)? Affects some internal handling.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Output Handling</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  documentTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">document</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # The main XML tag wrapping the agent&#39;s final output (required for CoT).</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  endTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;/document&gt;&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # The closing tag that signals the agent has finished its main output.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  outputExt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tex</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Default file extension for the output file (e.g., tex, md, txt).</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  prefills</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;document&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # List of strings the AI should start its response(s) with.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Item [0] is for Round 0, Item [1] is for Round 1 (reflection).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Crucial for models needing specific start formats (e.g., XML tags).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # File Handling (Optional - Advanced)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # requiredFiles:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   TEMPLATE: path/to/template.tex # Map variable names to required file paths relative to workspace.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # requiredFilesInternal:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   STYLE_GUIDE: styles/internal_style.css # Map variable names to files relative to the agent&#39;s YAML file location.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # filePatternsContain:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   - pattern: &#39;bibliography&#39; # Find files whose names contain this pattern.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #     varName: BIBLIOGRAPHY # Make content available via {{ BIBLIOGRAPHY_CONTENT }} in prompts.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #     categories: [&#39;auxiliaryFile&#39;, &#39;auxiliaryFiles&#39;] # Search within these UI file categories.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # defaultOutputFiles: # Used when the agent is designed to produce multiple outputs.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   - &#39;introduction.tex&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   - &#39;methods.tex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --- Agent Prompts ---</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define the text templates used to instruct the LLM.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Override parent prompts here if inheriting.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">prompts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  systemPrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    # Defines the AI&#39;s role, core instructions, constraints, overall persona.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    # Sent once at the beginning (for supported models).</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    [Define the AI&#39;s role and core instructions]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  userPrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    # Provides introductory text, main context (input files, user instruction).</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    # Variables like {{ INPUT_CONTENT }}, {{ INSTRUCTION }}, {{ BIBLIOGRAPHY_CONTENT }} (from filePatternsContain) are substituted here.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    [Define context, instructions, and input variables like {{ INPUT_CONTENT }}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  userRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    # The prompt for the AI&#39;s first round of work (Round 0).</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    # Often includes guidance for thinking (&lt;scratchpad&gt;) and output structure (&lt;documentTag&gt;).</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    [Define the initial task prompt, potentially including scratchpad guidance]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # userReflect: | # Optional: Only needed if you plan to use reflect=true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   The prompt for the AI&#39;s second round (Round 1) asking it to critique and improve its Round 0 output.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   [Define the reflection prompt]</span></span></code></pre></div><h4 id="using-variables-in-prompts-jinja2-templating" tabindex="-1">Using Variables in Prompts (Jinja2 Templating) <a class="header-anchor" href="#using-variables-in-prompts-jinja2-templating" aria-label="Permalink to &quot;Using Variables in Prompts (Jinja2 Templating)&quot;">​</a></h4>`,14)),i("p",null,[s[0]||(s[0]=e("Prompts are processed using the Jinja2 templating engine, allowing you to insert dynamic information using ")),i("code",null,t(n.variable_name),1),s[1]||(s[1]=e(" syntax. TeXRA provides several built-in variables based on the files and instructions you select in the UI:"))]),s[39]||(s[39]=i("p",null,[i("strong",null,"Common Variables:")],-1)),i("ul",null,[i("li",null,[i("code",null,t(n.INSTRUCTION),1),s[2]||(s[2]=e(': The text entered into the "Instruction" box in the UI.'))]),i("li",null,[i("code",null,t(n.INPUT_FILE),1),s[3]||(s[3]=e(": The path of the primary input file."))]),i("li",null,[i("code",null,t(n.INPUT_CONTENT),1),s[4]||(s[4]=e(": The full text content of the primary input file."))]),i("li",null,[i("code",null,t(n.REFERENCE_FILE),1),s[5]||(s[5]=e(": Path of the primary reference file."))]),i("li",null,[i("code",null,t(n.REFERENCE_CONTENT),1),s[6]||(s[6]=e(": Content of the primary reference file."))]),i("li",null,[i("code",null,t(n.AUXILIARY_FILE),1),s[7]||(s[7]=e(": Path of the primary auxiliary file."))]),i("li",null,[i("code",null,t(n.AUXILIARY_CONTENT),1),s[8]||(s[8]=e(": Content of the primary auxiliary file."))]),i("li",null,[i("code",null,t(n.EDITED_FILE),1),s[9]||(s[9]=e(": Path of the edited file (used in ")),s[10]||(s[10]=i("code",null,"merge",-1)),s[11]||(s[11]=e(")."))]),i("li",null,[i("code",null,t(n.EDITED_CONTENT),1),s[12]||(s[12]=e(": Content of the edited file."))]),i("li",null,[i("code",null,t(n.MEDIA_FILE),1),s[13]||(s[13]=e(": Path of the primary media file. ")),s[14]||(s[14]=i("em",null,[e("Note: Media content itself isn't directly inserted as text; it's handled separately for multimodal models. See "),i("a",{href:"./working-with-figures.html"},"Working with Figures"),e(".")],-1))])]),s[40]||(s[40]=i("p",null,[i("strong",null,"Multiple File Variables:")],-1)),i("ul",null,[i("li",null,[i("code",null,t(n.ALL_INPUTS),1),s[15]||(s[15]=e(": XML string containing all selected input files (primary + multiple) wrapped in ")),s[16]||(s[16]=i("code",null,'<document name="...">...</document>',-1)),s[17]||(s[17]=e(" tags."))]),i("li",null,[i("code",null,t(n.ALL_REFERENCES),1),s[18]||(s[18]=e(": Similar XML string for all reference files."))]),i("li",null,[i("code",null,t(n.ALL_AUXILIARYS),1),s[19]||(s[19]=e(": Similar XML string for all auxiliary files."))]),i("li",null,[i("code",null,t(n.LIST_OF_ALL_INPUTS),1),s[20]||(s[20]=e(": Simple comma-separated string listing all input file paths."))]),i("li",null,[i("code",null,t(n.LIST_OF_ALL_REFERENCES),1),s[21]||(s[21]=e(": Similar comma-separated list for reference files."))]),i("li",null,[i("code",null,t(n.LIST_OF_ALL_AUXILIARYS),1),s[22]||(s[22]=e(": Similar comma-separated list for auxiliary files."))])]),s[41]||(s[41]=i("p",null,[i("strong",null,"Multiple Output Variable:")],-1)),i("ul",null,[i("li",null,[i("code",null,t(n.OUTPUT_FILES_ORDER),1),s[23]||(s[23]=e(": Comma-separated string listing the output filenames specified in the UI. Crucial for agents generating multiple files. See ")),s[24]||(s[24]=i("a",{href:"./multiple-output.html"},"Handling Multiple Files",-1)),s[25]||(s[25]=e("."))])]),s[42]||(s[42]=i("p",null,[i("strong",null,[e("Custom Variables (from "),i("code",null,"settings"),e("):")])],-1)),i("ul",null,[i("li",null,[s[26]||(s[26]=e("Files specified in ")),s[27]||(s[27]=i("code",null,"requiredFiles",-1)),s[28]||(s[28]=e(" or ")),s[29]||(s[29]=i("code",null,"requiredFilesInternal",-1)),s[30]||(s[30]=e(" are available as ")),i("code",null,t(n.VARNAME_CONTENT),1),s[31]||(s[31]=e(" (e.g., ")),i("code",null,t(n.TEMPLATE_CONTENT),1),s[32]||(s[32]=e(")."))]),i("li",null,[s[33]||(s[33]=e("Files matched by ")),s[34]||(s[34]=i("code",null,"filePatternsContain",-1)),s[35]||(s[35]=e(" are available as ")),i("code",null,t(n.VARNAME_CONTENT),1),s[36]||(s[36]=e(" (e.g., ")),i("code",null,t(n.BIBLIOGRAPHY_CONTENT),1),s[37]||(s[37]=e(")."))])]),s[43]||(s[43]=a(`<p><strong>Example Usage in <code>userPrefix</code>:</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">userPrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Please process the main document: {{ INPUT_FILE }}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &lt;document name=&quot;{{ INPUT_FILE }}&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  {{ INPUT_CONTENT }}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &lt;/document&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Refer to these auxiliary files:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  {{ ALL_AUXILIARYS }}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Apply the following instruction:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &lt;instruction&gt;{{ INSTRUCTION }}&lt;/instruction&gt;</span></span></code></pre></div><p><strong>Key Considerations:</strong></p><ul><li><strong>Architecture Overview:</strong> For a high-level understanding of the execution flow and how prompts/settings interact, see the <a href="./agent-architecture.html">Agent Architecture &amp; Execution Flow</a> guide.</li><li><strong>Inheritance:</strong> Inheriting from a relevant built-in agent (like <code>correct</code> or <code>polish</code>) can save significant effort. Only define the settings and prompts you need to change.</li><li><strong>Multiple Outputs:</strong> If your agent needs to generate multiple distinct files, ensure your prompts generate the required XML structure. See the <a href="./multiple-output.html">Handling Multiple Files</a> guide.</li><li><strong>Start Simple:</strong> Begin with basic settings/prompts and add complexity incrementally.</li><li><strong>Test Iteratively:</strong> Test frequently and review logs in the ProgressBoard.</li></ul><h3 id="step-4-save-and-reload" tabindex="-1">Step 4: Save and Reload <a class="header-anchor" href="#step-4-save-and-reload" aria-label="Permalink to &quot;Step 4: Save and Reload&quot;">​</a></h3><ol><li>Save your <code>.yaml</code> file.</li><li>Reload the VS Code window (Command Palette &gt; <code>Developer: Reload Window</code>).</li><li>Your new custom agent should now appear in the &quot;Agent&quot; dropdown menu in the TeXRA UI.</li></ol><p>For more complex examples and advanced configuration options like <code>requiredFiles</code> and <code>filePatternsContain</code>, examine the source <code>.yaml</code> files of the <a href="./built-in-agents.html">Built-in Agents</a>.</p>`,7))])}const y=l(o,[["render",h]]);export{f as __pageData,y as default};
