import{_ as l,c as n,o,a2 as s,j as e,a as i,t as p}from"./chunks/framework.D30IVGRC.js";const k=JSON.parse('{"title":"Handling Multiple Files (Inputs & Outputs)","description":"","frontmatter":{},"headers":[],"relativePath":"guide/multiple-output.md","filePath":"guide/multiple-output.md"}'),h={name:"guide/multiple-output.md"};function u(a,t,r,d,c,g){return o(),n("div",null,[t[10]||(t[10]=s(`<h1 id="handling-multiple-files-inputs-outputs" tabindex="-1">Handling Multiple Files (Inputs &amp; Outputs) <a class="header-anchor" href="#handling-multiple-files-inputs-outputs" aria-label="Permalink to &quot;Handling Multiple Files (Inputs &amp; Outputs)&quot;">​</a></h1><p>TeXRA excels at managing complex academic projects often split across multiple files, like a paper with several chapters or appendices. This guide explains how to work with multiple input files and how agents can generate multiple, distinct output files in a single run.</p><h2 id="why-use-multiple-files" tabindex="-1">Why Use Multiple Files? <a class="header-anchor" href="#why-use-multiple-files" aria-label="Permalink to &quot;Why Use Multiple Files?&quot;">​</a></h2><p>Working with multiple files is often necessary when:</p><ul><li>Your source document is split (e.g., <code>chapter1.tex</code>, <code>chapter2.tex</code>, <code>appendixA.tex</code>).</li><li>You need to apply consistent changes (like polishing or correcting) across related documents.</li><li>You only want an agent to modify specific parts (e.g., only update <code>chapter2.tex</code> and <code>appendixA.tex</code> based on the full context).</li><li>An agent needs to generate distinct outputs based on a single input (less common, but possible).</li></ul><h2 id="ui-for-multiple-files" tabindex="-1">UI for Multiple Files <a class="header-anchor" href="#ui-for-multiple-files" aria-label="Permalink to &quot;UI for Multiple Files&quot;">​</a></h2><p>The TeXRA UI provides dedicated sections for managing multiple files:</p><ul><li><strong>Input Files</strong>: Use the &quot;▼&quot; toggle to add multiple source files. These are typically concatenated and provided as context to the selected agent. <ul><li><strong>Multiple Outputs</strong>: <ul><li>Use the &quot;▼&quot; toggle to activate multiple output mode.</li><li>Use the &quot;+&quot; button (<i class="codicon codicon-add"></i>) to list the <em>exact filenames</em> you expect the agent to generate. <strong>Order matters</strong> if the agent references them by position.</li><li>The list can be cleared (<i class="codicon codicon-trash"></i>).</li><li>If this section is <em>not</em> toggled/activated, TeXRA expects the agent to produce only a single output file, named based on the primary input file.</li></ul></li></ul></li></ul><p><em>(See <a href="./file-management.html">File Management</a> for general UI controls.)</em></p><h2 id="how-it-works-agent-input" tabindex="-1">How It Works: Agent Input <a class="header-anchor" href="#how-it-works-agent-input" aria-label="Permalink to &quot;How It Works: Agent Input&quot;">​</a></h2><p>When you provide multiple input files, TeXRA typically combines their content (often wrapping each in <code>&lt;document name=\\&quot;...\\&quot;&gt;</code> tags within a parent <code>&lt;documents&gt;</code> tag) and includes it in the prompt sent to the selected agent. The agent receives the combined context to inform its processing.</p><h2 id="how-it-works-agent-output-extraction" tabindex="-1">How It Works: Agent Output &amp; Extraction <a class="header-anchor" href="#how-it-works-agent-output-extraction" aria-label="Permalink to &quot;How It Works: Agent Output &amp; Extraction&quot;">​</a></h2><p>This is the crucial part for generating multiple distinct files:</p><ol><li><p><strong>User Specifies Outputs:</strong> You list the desired output filenames in the &quot;Multiple Outputs&quot; UI section (e.g., <code>chapter2_polish_r0_model.tex</code>, <code>appendixA_polish_r0_model.tex</code>).</p></li><li><p><strong>Agent Generates Structured XML:</strong> The selected agent must be designed (through its <code>prompts</code>) to produce a <em>single XML response</em> containing separate blocks for each intended output file, using a structure like this:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">latex_documents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- Or agent&#39;s specific documentTag --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">document</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chapter2_polish_r0_model.tex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    % ... content for the first output file ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">document</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;appendixA_polish_r0_model.tex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    % ... content for the second output file ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">latex_documents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>TeXRA Extracts:</strong> The TeXRA backend (<code>OutputHandler.ts</code>) parses this XML response. It looks for <code>&lt;document&gt;</code> tags with a <code>name</code> attribute that <strong>exactly matches</strong> one of the filenames you listed in the UI.</p></li><li><p><strong>Files Saved:</strong> For each matching tag found, TeXRA extracts the content within that tag and saves it to the corresponding filename. If the agent&#39;s response doesn&#39;t include a <code>&lt;document&gt;</code> tag with a name matching one you specified, that file will not be created or updated.</p></li></ol><p><strong>Key Point:</strong> The agent doesn&#39;t magically know how to split output (it hasn&#39;t mastered telepathy... yet). It must be explicitly instructed via its prompts (like in <code>polish_multiple.yaml</code>) to generate the <code>&lt;document name=\\&quot;...\\&quot;&gt;</code> structure matching the list you provide in the UI.</p><h2 id="the-multiple-suffix" tabindex="-1">The <code>_multiple</code> Suffix <a class="header-anchor" href="#the-multiple-suffix" aria-label="Permalink to &quot;The \`_multiple\` Suffix&quot;">​</a></h2><p>You might notice <code>_multiple</code> appended to the agent name in logs or temporary filenames when using the &quot;Multiple Outputs&quot; feature. This internal suffix indicates that TeXRA is operating in a context where multiple output files are expected based on your UI selection; it doesn&#39;t necessarily mean a different agent <code>.yaml</code> file (like <code>polish_multiple.yaml</code>) was automatically chosen unless you selected it explicitly.</p><h2 id="example-polish-multiple-agent-prompts" tabindex="-1">Example: <code>polish_multiple</code> Agent Prompts <a class="header-anchor" href="#example-polish-multiple-agent-prompts" aria-label="Permalink to &quot;Example: \`polish_multiple\` Agent Prompts&quot;">​</a></h2>`,18)),e("p",null,[t[0]||(t[0]=i("The built-in ")),t[1]||(t[1]=e("code",null,"polish_multiple.yaml",-1)),t[2]||(t[2]=i(" agent (which inherits from ")),t[3]||(t[3]=e("code",null,"polish",-1)),t[4]||(t[4]=i(") demonstrates how prompts need to be structured to request and format multiple outputs within the ")),t[5]||(t[5]=e("code",null,"<latex_documents>",-1)),t[6]||(t[6]=i(" tag. Its ")),t[7]||(t[7]=e("code",null,"userRequest",-1)),t[8]||(t[8]=i(" prompt explicitly asks the model to structure its response like this, referencing the ")),e("code",null,p(a.OUTPUT_FILES_ORDER),1),t[9]||(t[9]=i(" variable which contains the comma-separated list of filenames from the UI:"))]),t[11]||(t[11]=s(`<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (Inside polish_multiple.yaml userRequest prompt)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ... instructions ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use the following format:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;latex_documents&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;document name=&quot;{OUTPUT_FILES_ORDER[0]}&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">% </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">1ST_UPDATED_LATEX_DOCUMENT_1</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> HERE</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;/document&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;document name=&quot;{OUTPUT_FILES_ORDER[1]}&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">% </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">1ST_UPDATED_LATEX_DOCUMENT_2</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> HERE</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;/document&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> (repeat for all output files)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;/latex_documents&gt;</span></span></code></pre></div><p>This instructs the LLM to generate the necessary XML structure that TeXRA&#39;s <code>OutputHandler</code> can parse.</p><h2 id="when-to-use" tabindex="-1">When to Use <a class="header-anchor" href="#when-to-use" aria-label="Permalink to &quot;When to Use&quot;">​</a></h2><ul><li>Applying consistent edits (e.g., <code>polish</code>, <code>correct</code>) across multiple related <code>.tex</code> files.</li><li>Tasks where an agent naturally produces distinct outputs (though less common than editing existing files).</li><li>Targeting agent modifications to specific files within a larger project.</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="./custom-agents.html">Custom Agents</a>: Learn how to design prompts for agents handling multiple outputs.</li><li><a href="./file-management.html">File Management</a>: Review the file selection UI in detail.</li><li><a href="./agent-architecture.html">Agent Architecture</a>: Understand the overall agent execution flow.</li></ul><h2 id="enabling-multiple-outputs" tabindex="-1">Enabling Multiple Outputs <a class="header-anchor" href="#enabling-multiple-outputs" aria-label="Permalink to &quot;Enabling Multiple Outputs&quot;">​</a></h2><p>To enable multiple output files, simply click the toggle icon (▼) next to the &quot;Multiple Outputs&quot; label in the main TeXRA interface file selection area. This will expand the section, allowing you to manage the output file list.</p><h2 id="managing-output-files" tabindex="-1">Managing Output Files <a class="header-anchor" href="#managing-output-files" aria-label="Permalink to &quot;Managing Output Files&quot;">​</a></h2><p>Once expanded, you can manage the output files:</p><ol><li><strong>Add Files</strong>: Use the &quot;Add&quot; button (<i class="codicon codicon-add"></i>) to specify output filenames. You typically need one output file for each corresponding input file.</li><li><strong>Remove Files</strong>: Click the &quot;-&quot; button next to a file to remove it.</li><li><strong>Reorder Files</strong>: Drag and drop files to ensure the order matches the input file order.</li><li><strong>Clear List</strong>: Use the &quot;Empty List&quot; button (<i class="codicon codicon-trash"></i>) to remove all specified output files.</li></ol><h2 id="output-naming" tabindex="-1">Output Naming <a class="header-anchor" href="#output-naming" aria-label="Permalink to &quot;Output Naming&quot;">​</a></h2>`,12))])}const f=l(h,[["render",u]]);export{k as __pageData,f as default};
