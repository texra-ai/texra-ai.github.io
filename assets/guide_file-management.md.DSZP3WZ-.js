import{_ as i,c as t,o as a,a2 as o}from"./chunks/framework.D30IVGRC.js";const l="/images/file-selection.png",g=JSON.parse('{"title":"File Management","description":"","frontmatter":{},"headers":[],"relativePath":"guide/file-management.md","filePath":"guide/file-management.md"}'),s={name:"guide/file-management.md"};function n(r,e,c,p,d,u){return a(),t("div",null,e[0]||(e[0]=[o('<h1 id="file-management" tabindex="-1">File Management <a class="header-anchor" href="#file-management" aria-label="Permalink to &quot;File Management&quot;">​</a></h1><p>Academic projects often involve juggling numerous files – main documents, chapters, figures, references, auxiliary styles... TeXRA aims to make this less of a circus act with its comprehensive file management system. This guide explains how to effectively organize, select, and manage files when working with TeXRA.</p><h2 id="file-categories" tabindex="-1">File Categories <a class="header-anchor" href="#file-categories" aria-label="Permalink to &quot;File Categories&quot;">​</a></h2><p>TeXRA organizes files into several categories:</p><h3 id="input-files" tabindex="-1">Input Files <a class="header-anchor" href="#input-files" aria-label="Permalink to &quot;Input Files&quot;">​</a></h3><p>These are the primary files that the agent will process. They typically include:</p><ul><li>LaTeX documents (<code>.tex</code>)</li><li>Text files (<code>.txt</code>)</li><li>Markdown files (<code>.md</code>)</li></ul><p>Input files can be a single main document or multiple related files (like chapters of a book or sections of a paper).</p><h3 id="reference-files" tabindex="-1">Reference Files <a class="header-anchor" href="#reference-files" aria-label="Permalink to &quot;Reference Files&quot;">​</a></h3><p>Reference files provide examples or additional context for the agent. They can be:</p><ul><li>Sample documents with desired formatting</li><li>Previous versions of your work</li><li>Published papers with similar content</li><li>Templates or examples</li></ul><h3 id="auxiliary-files" tabindex="-1">Auxiliary Files <a class="header-anchor" href="#auxiliary-files" aria-label="Permalink to &quot;Auxiliary Files&quot;">​</a></h3><p>These are supporting files needed for proper document processing:</p><ul><li>LaTeX class files (<code>.cls</code>)</li><li>LaTeX style files (<code>.sty</code>)</li><li>Bibliography files (<code>.bib</code>)</li><li>Custom macro files</li><li>Configuration files</li></ul><h3 id="figure-media-files" tabindex="-1">Figure &amp; Media Files <a class="header-anchor" href="#figure-media-files" aria-label="Permalink to &quot;Figure &amp; Media Files&quot;">​</a></h3><p>Files containing visual or audio content, such as images, PDFs used as figures, or audio recordings. See the <a href="./working-with-figures.html">Working with Figures</a> guide for details on supported types, UI controls, and automatic extraction.</p><h2 id="file-selection-interface" tabindex="-1">File Selection Interface <a class="header-anchor" href="#file-selection-interface" aria-label="Permalink to &quot;File Selection Interface&quot;">​</a></h2><p>The TeXRA interface provides a streamlined way to select and manage files using distinct sections for each file category (Input <i class="codicon codicon-file-code"></i>, Reference <i class="codicon codicon-book"></i>, Auxiliary <i class="codicon codicon-file-add"></i>, Media <i class="codicon codicon-file-media"></i>):</p><p><img src="'+l+`" alt="File Selection Interface"></p><h3 id="single-file-selection" tabindex="-1">Single File Selection <a class="header-anchor" href="#single-file-selection" aria-label="Permalink to &quot;Single File Selection&quot;">​</a></h3><p>For each file category, you can select a single file using the dropdown menu. The interface provides several helpful options:</p><ul><li><strong>Current Button</strong> (<i class="codicon codicon-file-code"></i>): Select the currently open file in VS Code</li><li><strong>Empty Button</strong> (<i class="codicon codicon-close"></i>): Clear the current selection</li><li><strong>Multiple Toggle</strong> (▼): Switch to multiple file selection mode</li><li><strong>Refresh Button</strong> (<i class="codicon codicon-refresh"></i> icon next to label): Update the file list</li></ul><h3 id="multiple-file-selection" tabindex="-1">Multiple File Selection <a class="header-anchor" href="#multiple-file-selection" aria-label="Permalink to &quot;Multiple File Selection&quot;">​</a></h3><p>For projects requiring multiple files, enable the multiple file selection mode:</p><ol><li>Click the &quot;▼&quot; toggle next to the file category</li><li>The multiple selection panel will expand</li><li>Use the &quot;Add&quot; button (<i class="codicon codicon-add"></i>) to add files via a file picker</li><li>Remove files with the &quot;-&quot; button next to each file</li><li>Reorder files by dragging and dropping</li><li>Clear the entire list using the &quot;Empty List&quot; button (<i class="codicon codicon-trash"></i>)</li></ol><p>Multiple file selection is particularly useful for:</p><ul><li>Processing multiple chapters of a book</li><li>Working with documents split across multiple files</li><li>Batch processing similar documents</li><li>Including multiple reference materials</li></ul><h3 id="adding-opened-files" tabindex="-1">Adding Opened Files <a class="header-anchor" href="#adding-opened-files" aria-label="Permalink to &quot;Adding Opened Files&quot;">​</a></h3><p>The &quot;Add Opened Files&quot; button (<i class="codicon codicon-folder-opened"></i>) available for Input, Reference, and Auxiliary files allows you to quickly add all currently open files in your VS Code editor (that match the allowed file types) to the respective multiple file list. This is useful when you have already opened the relevant files for your project.</p><h3 id="output-files" tabindex="-1">Output Files <a class="header-anchor" href="#output-files" aria-label="Permalink to &quot;Output Files&quot;">​</a></h3><p>When using multiple input files, you may need to specify multiple output files:</p><ol><li>Enable the &quot;Multiple Outputs&quot; section by clicking the toggle (▼)</li><li>Add output files corresponding to your input files using the &quot;Add&quot; button (<i class="codicon codicon-add"></i>)</li><li>Optionally set a custom output filename</li></ol><h2 id="file-path-handling" tabindex="-1">File Path Handling <a class="header-anchor" href="#file-path-handling" aria-label="Permalink to &quot;File Path Handling&quot;">​</a></h2><p>TeXRA intelligently handles file paths to ensure proper document processing:</p><h3 id="relative-vs-absolute-paths" tabindex="-1">Relative vs. Absolute Paths <a class="header-anchor" href="#relative-vs-absolute-paths" aria-label="Permalink to &quot;Relative vs. Absolute Paths&quot;">​</a></h3><ul><li><strong>Display</strong>: Files are displayed with paths relative to the workspace root</li><li><strong>Processing</strong>: TeXRA resolves paths to their absolute form when needed</li><li><strong>Output</strong>: Output files are typically saved in the same directory as their corresponding input files</li></ul><h3 id="file-path-configuration" tabindex="-1">File Path Configuration <a class="header-anchor" href="#file-path-configuration" aria-label="Permalink to &quot;File Path Configuration&quot;">​</a></h3><p>You can customize file extensions and ignored paths in VS Code settings. The default values are listed in the <a href="./configuration.html">Configuration Guide</a>. A minimal example configuration might look like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;texra.files.included.inputExtensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.tex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.md&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;texra.files.ignored.directories&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node_modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="output-file-naming" tabindex="-1">Output File Naming <a class="header-anchor" href="#output-file-naming" aria-label="Permalink to &quot;Output File Naming&quot;">​</a></h2><p>TeXRA uses a structured naming convention for output files:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>original_filename_agent_r0_model.extension</span></span></code></pre></div><p>For example:</p><ul><li>Input: <code>paper.tex</code></li><li>Agent: <code>polish</code></li><li>Model: <code>sonnet37</code></li><li>Output: <code>paper_polish_r0_sonnet37.tex</code></li></ul><p>When reflection is enabled, you may also see:</p><ul><li>Round 1: <code>paper_polish_r1_sonnet37.tex</code></li></ul><h3 id="custom-output-names" tabindex="-1">Custom Output Names <a class="header-anchor" href="#custom-output-names" aria-label="Permalink to &quot;Custom Output Names&quot;">​</a></h3><p>For specific needs, you can override the default naming:</p><ol><li>Click the &quot;&gt;&quot; toggle next to &quot;Output Filename&quot;</li><li>Enter your custom filename (including extension) in the revealed input field.</li></ol><h2 id="file-management-commands" tabindex="-1">File Management Commands <a class="header-anchor" href="#file-management-commands" aria-label="Permalink to &quot;File Management Commands&quot;">​</a></h2><p>TeXRA provides several commands for managing generated files, accessible from the main interface or the ProgressBoard:</p><h3 id="pack" tabindex="-1">Pack <a class="header-anchor" href="#pack" aria-label="Permalink to &quot;Pack&quot;">​</a></h3><p>The &quot;Pack&quot; button (<i class="codicon codicon-archive"></i>) organizes output files into a structured history folder:</p><ol><li>Creates a timestamped directory in the &quot;History&quot; folder</li><li>Moves all relevant output files and logs</li><li>Preserves the relationship between input and output files</li></ol><p>This is useful for maintaining a clean workspace while preserving previous outputs.</p><h3 id="clean" tabindex="-1">Clean <a class="header-anchor" href="#clean" aria-label="Permalink to &quot;Clean&quot;">​</a></h3><p>The &quot;Clean&quot; button (<i class="codicon codicon-trash"></i>) removes output files for the selected agent and model:</p><ol><li>Identifies all outputs for the current configuration</li><li>Safely removes them from the workspace</li><li>Leaves original input files untouched</li></ol><p>Use this to clean up your workspace after reviewing the results.</p><h2 id="working-with-latex-projects" tabindex="-1">Working with LaTeX Projects <a class="header-anchor" href="#working-with-latex-projects" aria-label="Permalink to &quot;Working with LaTeX Projects&quot;">​</a></h2><p>For complex LaTeX projects with many files and dependencies:</p><h3 id="latex-directory-structure" tabindex="-1">LaTeX Directory Structure <a class="header-anchor" href="#latex-directory-structure" aria-label="Permalink to &quot;LaTeX Directory Structure&quot;">​</a></h3><p>TeXRA works well with standard LaTeX project structures:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>project/</span></span>
<span class="line"><span>├── main.tex            # Main document</span></span>
<span class="line"><span>├── chapters/           # Chapter files</span></span>
<span class="line"><span>│   ├── intro.tex       # Introduction</span></span>
<span class="line"><span>│   └── methodology.tex # Methodology</span></span>
<span class="line"><span>├── figures/            # Figure directory</span></span>
<span class="line"><span>│   ├── diagram.pdf     # Figure file</span></span>
<span class="line"><span>│   └── graph.png       # Another figure</span></span>
<span class="line"><span>└── bibliography.bib    # Bibliography</span></span></code></pre></div><h3 id="input-file-detection" tabindex="-1">Input File Detection <a class="header-anchor" href="#input-file-detection" aria-label="Permalink to &quot;Input File Detection&quot;">​</a></h3><p>TeXRA automatically detects appropriate input files based on:</p><ol><li>File extension (<code>.tex</code>, <code>.txt</code>, <code>.md</code>)</li><li>Location in project hierarchy</li><li>Content structure</li></ol><h3 id="latex-workshop-integration" tabindex="-1">LaTeX Workshop Integration <a class="header-anchor" href="#latex-workshop-integration" aria-label="Permalink to &quot;LaTeX Workshop Integration&quot;">​</a></h3><p>If you use the popular <a href="https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop" target="_blank" rel="noreferrer">LaTeX Workshop</a> extension, TeXRA attempts to automatically configure some settings upon its first activation to ensure smoother integration and cleaner project structures:</p><ul><li><p><strong>Output Directory</strong>: Sets <code>latex-workshop.latex.outDir</code> to <code>%DIR%/build/</code>. This directs LaTeX compilation output (like <code>.aux</code>, <code>.log</code>, <code>.pdf</code> files) into a <code>build</code> subdirectory within your project, keeping your main directory tidy.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;latex-workshop.latex.outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%DIR%/build/&quot;</span></span></code></pre></div></li><li><p><strong>Compilation Arguments</strong>: Adds arguments like <code>-interaction=nonstopmode</code>, <code>-pdf</code>, and <code>-f</code> to <code>latex-workshop.latex.magic.args</code>. These help LaTeX compile more robustly, especially when run by TeXRA agents.</p></li><li><p><strong>Word Wrap</strong>: Enables word wrap specifically for <code>.tex</code> files (<code>[latex].editor.wordWrap</code>) for better readability of long lines.</p></li></ul><p>These automatic configurations aim to provide a good default setup. You can always review and adjust these settings in your VS Code <code>settings.json</code> file if needed.</p><h2 id="cross-computer-syncing" tabindex="-1">Cross-Computer Syncing <a class="header-anchor" href="#cross-computer-syncing" aria-label="Permalink to &quot;Cross-Computer Syncing&quot;">​</a></h2><p>For users working on multiple computers, we recommend using a cloud storage service like Dropbox to sync the following folders:</p><ul><li><strong>Log</strong>: Contains thinking logs and other processing information</li><li><strong>Diffs</strong>: Stores difference files generated by LaTeX diff functionality</li><li><strong>History</strong>: Keeps track of different versions of your documents</li></ul><p>To maintain your local directory structure while syncing these folders, we suggest using soft links (symbolic links). This approach allows you to store the actual folders in Dropbox while creating symbolic links in your local project directory. For example:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/Dropbox/texra-papers/ProjectName/Diffs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/local/ProjectName</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/Dropbox/texra-papers/ProjectName/History</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/local/ProjectName</span></span></code></pre></div><p>Replace <code>/path/to/Dropbox</code> and <code>/path/to/local</code> with your actual Dropbox and local project paths.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><h3 id="organizing-input-files" tabindex="-1">Organizing Input Files <a class="header-anchor" href="#organizing-input-files" aria-label="Permalink to &quot;Organizing Input Files&quot;">​</a></h3><ul><li><strong>Main Document First</strong>: When using multiple input files, list the main document first</li><li><strong>Logical Order</strong>: Arrange chapter files in logical reading order</li><li><strong>Consistency</strong>: Maintain consistent file naming conventions</li></ul><h3 id="managing-output-files" tabindex="-1">Managing Output Files <a class="header-anchor" href="#managing-output-files" aria-label="Permalink to &quot;Managing Output Files&quot;">​</a></h3><ul><li><strong>Regular Cleanup</strong>: Use the &quot;Clean&quot; command to remove unnecessary outputs</li><li><strong>Version Control</strong>: Use &quot;Pack&quot; to preserve important milestones</li><li><strong>Diff Review</strong>: Use LaTeXdiff to review changes before accepting them</li></ul><h3 id="reference-materials" tabindex="-1">Reference Materials <a class="header-anchor" href="#reference-materials" aria-label="Permalink to &quot;Reference Materials&quot;">​</a></h3><ul><li><strong>Relevant Examples</strong>: Include only directly relevant reference files</li><li><strong>Context Limits</strong>: Be mindful of model context limits when adding references</li><li><strong>Format Consistency</strong>: Use reference materials with similar formatting styles</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>Now that you understand how to manage files in TeXRA, you might want to explore:</p><ul><li><a href="/guide/tool-integration.html">Tool Integration</a> - Learn how TeXRA leverages external tools</li><li><a href="/guide/latex-diff.html">LaTeX Diff</a> - Understand how to compare document versions</li><li><a href="/guide/intelligent-merge.html">Intelligent Merge</a> - Learn about merging edited documents</li></ul>`,87)]))}const f=i(s,[["render",n]]);export{g as __pageData,f as default};
